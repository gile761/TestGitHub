<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<!-- DataSource(Connection Pool) 빈 등록 .server.xml
	에 설정한 리소스 JNDI 커넥션 풀과 연결-->
	<jee:jndi-lookup id="dataSource" 
	jndi-name="jdbc/xe" resource-ref="true"></jee:jndi-lookup>
	
	<!-- TransactionManager 빈 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 기본 설정 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED"/>
			 <!-- name속성값을 *로 지정하면 모든 메서드에 적용 즉 어떠한 메서드를 사용해도 된다
			. 트랜잭션 속성 REQUIRED 를 적용. 즉 값을 가져오는 역할을 함. -->
			<tx:method name="get*" read-only="true"/> 
			<!--  get 으로 시작하는 모든 메서드를 받아들인다. 그리고 단지 읽기 속성을 하기
			위해서  true로 설정 --> 
		</tx:attributes>
	</tx:advice>
	
	<!-- AOP 설정을 사용해서 Transaction 적용 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* mvc.board.service.*Service.*(..))"/>
		<!-- mvc.board.service 	패키지의  Service 포함하는 모든 클래스,인터페이스의 모든 메서드를  포인트 컷 한다. 
		월말평가 문제
		AOP란?
		 1.AOP(Aspect Oriented Programming) 의 약어로 객체 지향 프로그래밍을 잇는 관점 지향 프로그래밍의 또하나의
		 프로그래밍 언어 구조라고 할수 있다.
		 2.스프링 AOP 용어 정리
		   가.Joinpoint : 클래스의 객체 생성 시점,메서드 호출 시점,예외 발생 시점과 같이 어플리케이션을 실행할때
		   특정 작업이 시작되는 시점을을 조인포인트라 한다.
		   
		   나. Advice : 조인포인트에 삽입되어져 동작할수 있는 코드를 어드바이스라 한다.
		   다. pointcut: 여러개의 조인포인트를 하나로 결합한 것을 포인트컷이라 한다.
		   라. Advisor : 어드바이스와 포인트컷을 하나로 묶어 취급한 것을 '어드바이저'라고 부른다.
		   마. Weaving : 어드바이스를 핵심 로직 코드에 삽입하는 것을 '위빙'이라 부른다.
		   바. Target : 핵심 로직을 구현하는 클래스를 말한다.		   
	   -->
	</aop:config>		
	
	<!-- SqlMapClient 빈 등록 + 스프링에 ibatis 연결 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="/WEB-INF/SqlMapConfig.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- SqlMapClientTemplate 빈 등록 -->
	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient"></property>
	</bean>	
	
	
	<!-- @Component 빈들을 자동으로 등록 . 그러면  Controller 를 상속받지 않아도 컨트롤러 클래스를 만들 수 있다.
	 mvc.board 패키지의 클래스 뿐만 아니라	그 하위의 패키지 클래스 까지 탐색한다. 어노테이션을 스프링에 자동으로 등록해준다.
	 -->
	<context:component-scan base-package="mvc.board.*">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>    
</beans>
